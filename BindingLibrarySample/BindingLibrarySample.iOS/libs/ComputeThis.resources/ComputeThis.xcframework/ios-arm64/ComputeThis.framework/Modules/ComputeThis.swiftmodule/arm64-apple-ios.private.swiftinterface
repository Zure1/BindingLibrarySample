// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios16.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ComputeThis
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import ComputeThis
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@objc public enum NumberError : Swift.Int, Swift.Error {
  case unsupportedValue
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class PositiveNumber : ObjectiveC.NSObject {
  @objc final public let value: Swift.UInt
  @objc public init(_ value: Swift.UInt)
  @objc public init(_ value: Swift.Int) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class Adder : ObjectiveC.NSObject {
  @objc final public func add(a: ComputeThis.PositiveNumber, b: ComputeThis.PositiveNumber) -> ComputeThis.PositiveNumber
  @objc override dynamic public init()
  @objc deinit
}
extension ComputeThis.NumberError : Swift.Equatable {}
extension ComputeThis.NumberError : Swift.Hashable {}
extension ComputeThis.NumberError : Swift.RawRepresentable {}
